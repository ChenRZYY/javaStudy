
1、impala-shel1创建表
	1、内部表
		create table 表名(
		列名列类型，
		列名列类型，.
		prinary key(列名)
		partition by hash partitions 分区数
		stored as kudu
		tbpropertiesl(*kudu.table_ name"="kudu表 名", "udu.master adreses"adop01.7051....
		2.外部表
		create external table表名stored as kodu tbpertiesl"u.tble nane"=kxdu表名", "kudu.master 			adresessabo:1.0:1.7.7
		在创建外部表的时候，kudu的表必须存在
		内部表删除的时候，kudu的表也会删除
		外部表删除的时候，kudu的表不会删除
	2、DML
		1. insert
			1、插入单条数据
				insert into 表名vale[字段...
			2.插入多条数据
				inset into表名w....1.1字.... .
			3.批量插入
				insert into 表名select * from 表名2 wihere 字段名=字段值
		2、update
			update表名set字段名=字段值where字段名=字段值
		3. delete
			delete from 表名where字段名=字段值
		3、表的其他操作
			1、impala表重命名: alter table 表名rename to新表名
			2、kudu的表重命名:
				1.内部表:
				alter table 表名set tblproperties(Ikudu. table. _name"-"kudu表的新表名》)
				内部表可以通过此种方式直接修改xuJu表名
			2.外部表:
				alter table 表名set tblpropertisl("udu.table. name"="kudu表的新表名")
				外部表不能修改xuodu的表名，只能修改ipala表与kudu表的映射
	3.将内部表与外部表转换
		1.内部表转外部表
			alter table表名set tblproperties ("EXTERNAL"="TRUE")
		2.外部表转内部表
			alter table 表名set. tbIproperties ("EXTERINAL"="EALSE")
2、impala操作kudu的Api
	1、加载驱动
		Class.forName(驱动包名)
	2、获取链接
		Connection connection = DriverManger.getConnection(url)
	3、创建statement对象
		PreparedStatment  statment = connection.preparedStatment(sql);
	4、设置sql中的参数
		statment.setInt(1,10)
		statment.setString(2,"name")
	5、执行查询、更新
		statment.execute()
		statment.executeQuery()
	6、关闭资源
		statment.close()
		connection.close()
3、kudu的存储结构
	table:数据存储的形式
		tablet:table的一个分段
			metadata:存放的块[布隆索引、主键索引等信息]的信息
			rowset:数据存储的单元
				memrowset:是一块内存区域，存放的是插入数据，当数据量达到一定的阈值或者一定的时间之后，会flush成diskrowset
				diskrowset:
					blomFile：布隆索引[特点:如果判断存在，则不一定存在，如果判断不存在，则一定不存在]
					AdhocIndex:主键索引，存放主键对应的数据在basedata中的位置[rowoffset]
					basedata:存放的之前的数据，在diskrowset刚生成的时候，里面的数据就是memrowset flush的数据，但是因为后期有一些更新或者删除信息，这些更新删除信息最开始
							 保存在deltMem中，deltMem会flush成RedoFile，当redoFile文件越来越多的时候，会影响查询效率，此时会将redoFile与basedata进行合并，合并成最新的basedata.
					deltMem：是一块内存区域，存放的是更新或者删除信息，当数据量达到一定的阈值或者一定的时间之后，会flush成RedoFile
					redoFile：存放的是还没有合并到basedata中的更新和删除信息
					undoFIle:是有redoFile合并basedata之后产生，存放的是历史的更新或者删除信息
4、kudu的流程
	1、读流程
		1、client向master申请元数据
		2、master会对其做简单的校验[校验表是否存在，列名是否存在]
		3、返回元数据给client
		4、client会根据元数据连接tablet所在tabletserver，申请数据读取
		5、首先会从memrowset中查询是否存在待查询的主键数据，如果存在，取出来
		6、根据布隆过滤器判断主键数据是否存在与diskrowset中，如果存在，进行下一步，如果不存在，就直接返回memrowset中的数据
		7、如果布隆过滤器判断数据存在与diskrowset中，会从主键索引中查询数据是否真实存在，如果存在，将主键对应的rowoffset取出来
		8、根据rowoffset从basedata中取出数据，从delmem、redoFile中取出对应的更新删除信息，进行合并得到最新的数据
		9、将memrowset的数据与diskrowset的数据合并后返回给client
	2、插入流程
		1、client向master申请元数据
		2、master会对其做简单的校验[校验表是否存在，列名是否存在]
		3、返回元数据给client
		4、client会根据元数据连接tablet所在tabletserver，申请数据读取
		5、首先从memrowset中查询，是否存在待插入相同的主键，如果存在，报错
		6、通过布隆过滤器判断待插入数据的主键 是否存在与diskrowset中，如果不存在，就可以插入了
		7、如果布隆过滤器判断主键存在，还需要通过主键索引判断是否真实存在，如果存在，报错
		8、将插入信息写入WAL预写日志，便于后期的数据恢复
		9、将插入数据写入memrowset中
		10、返回信息给client
	3、数据更新或删除流程
		1、client向master申请元数据
		2、master会对其做简单的校验[校验表是否存在，列名是否存在]
		3、返回元数据给client
		4、client会根据元数据连接tablet所在tabletserver，申请数据读取
		5、根据数据所处位置不一样流程会有所不同
			1、如果数据存在与memrowset，将更新或者删除信息写入memrowset中数据对应的mutaition链表总，后期再flush的时候会进行合并
			2、如果数据存在与diskrowset中，会从主键索引中取出rowoffset，根据rowoffset从deltmem中查询数据是否存在更新删除信息，如果存在，将本次的更新
				删除信息加载mutaition链表中，如果不存在，则直接写入到deltmem中
		6、在更新或者删除信息写入之前，需要先写入WAL日志
		7、返回信息给client
5、业务流程
	1、专有名词:
		1、DSP:需求方平台
		2、DMP:数据管理平台
		3、ADX:广告交易平台
		4、RTB：实时竞价平台
		5、SSP:供应方平台
	2、流程
		1、广告主有打广告的需求，将需求告诉DSP，在DSP提供的web页面上进行受众目标的选择
		2、DSP对接DMP，将受众目标转化为受众人群
		3、DSP会代替广告主在ADX的RTB上进行实时竞价
		4、根据价高者得原则，出价最高的获取广告展示权
		5、SSP的经营的网站流量比较大，有很多的访问人群，如果访问人群正好是受众人群，就会看到对应的广告
		6、进入广告主的页面进行消费，将访问人群转化为消费人群
		
		


		
	